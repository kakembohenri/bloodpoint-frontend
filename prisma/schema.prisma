generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model blood_requests {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  hos_name        String    @db.VarChar(255)
  hos_address     String    @db.VarChar(255)
  purpose         String    @db.VarChar(255)
  request_date    String    @db.VarChar(255)
  required_date   String    @db.VarChar(255)
  additional_info String    @db.VarChar(255)
  contact_person  String    @db.VarChar(255)
  contact_email   String    @db.VarChar(255)
  contact_tel     String    @db.VarChar(255)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
}

model communications {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title           String    @db.VarChar(255)
  message_body    String    @db.VarChar(255)
  recipient_group String    @db.VarChar(255)
  sendTime        String    @db.VarChar(255)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
}

model donations {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  fullName      String    @db.VarChar(255)
  dob           String    @db.VarChar(255)
  age           String    @db.VarChar(255)
  gender        String    @db.VarChar(255)
  donorID       String    @db.VarChar(255)
  donation_date String    @db.VarChar(255)
  time          String    @db.VarChar(255)
  bloodType     String    @db.VarChar(255)
  pressure      String    @db.VarChar(255)
  level         String    @db.VarChar(255)
  weight        String    @db.VarChar(255)
  venue         String    @db.VarChar(255)
  note          String    @db.VarChar(255)
  email         String    @db.VarChar(255)
  phone         String    @db.VarChar(255)
  district      String    @db.VarChar(255)
  subcounty     String    @db.VarChar(255)
  address       String    @db.VarChar(255)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
}

model donors {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  donorID      String    @db.VarChar(255)
  fullName     String    @db.VarChar(255)
  dob          String    @db.VarChar(255)
  lastDonation String    @db.VarChar(255)
  gender       String    @db.VarChar(255)
  bloodType    String    @db.VarChar(255)
  district     String    @db.VarChar(255)
  email        String    @db.VarChar(255)
  subcounty    String    @db.VarChar(255)
  phone        String    @db.VarChar(255)
  address      String    @db.VarChar(255)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model forms {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  email      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model transfusions {
  id                  BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  patient_id          String    @db.VarChar(255)
  gender              String    @db.VarChar(255)
  blood_comp_id       String    @db.VarChar(255)
  recipient_name      String    @db.VarChar(255)
  transfuser          String    @db.VarChar(255)
  date_of_transfusion String    @db.VarChar(255)
  time_of_transfusion String    @db.VarChar(255)
  purpose             String    @db.VarChar(255)
  remarks             String    @db.VarChar(255)
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}
